<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="{{ test_plan.name }}" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          {% for variable in test_plan.variables %}
          <elementProp name="{{ variable.name }}" elementType="Argument">
            <stringProp name="Argument.name">{{ variable.name }}</stringProp>
            <stringProp name="Argument.value">{{ variable.value }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          {% endfor %}
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>

    <hashTree>
      {% for element in test_plan.tree recursive %}
        {% if element.type == "ThreadGroup" %}
        <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="{{ element.name }}" enabled="true">
          <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
          <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">{{ element.main_controller.continue_forever }}</boolProp>
            <stringProp name="LoopController.loops">{{ element.main_controller.loops }}</stringProp>
          </elementProp>
          <stringProp name="ThreadGroup.num_threads">{{ element.num_threads }}</stringProp>
          <stringProp name="ThreadGroup.ramp_time">{{ element.ramp_time }}</stringProp>
          <longProp name="ThreadGroup.start_time">1448503583000</longProp>
          <longProp name="ThreadGroup.end_time">1448503583000</longProp>
          <boolProp name="ThreadGroup.scheduler">false</boolProp>
          <stringProp name="ThreadGroup.duration"></stringProp>
          <stringProp name="ThreadGroup.delay"></stringProp>
        </ThreadGroup>
        <hashTree>
          {{ loop(element.tree )}}
        </hashTree>
        {% elif element.type == "HTTPSamplerProxy" %}
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="{{ element.name }}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">{{ element.domain }}</stringProp>
          <stringProp name="HTTPSampler.port">{{ element.port }}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">{{ element.protocol }}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">{{ element.path }}</stringProp>
          <stringProp name="HTTPSampler.method">{{ element.method }}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">{{ element.follow_redirects }}</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">{{ element.auto_redirects }}</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">{{ element.use_keepalive }}</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">{{ element.DO_MULTIPAT_POST }}</boolProp>
          <boolProp name="HTTPSampler.monitor">{{ element.monitor }}</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        {% endif %}
      {% endfor %}
    </hashTree>

  </hashTree>
</jmeterTestPlan>
